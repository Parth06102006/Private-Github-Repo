import React, { useState } from "react";
import MDEditor from "@uiw/react-md-editor";
import { Copy,Github,Brain } from "lucide-react";
import toast from "react-hot-toast";
import { generateReadme } from "../../utils/generateReadme";
import axios from "axios";

export default function RTE({ generatedValue,selectedRepo,owner,email }) {
  const [value, setValue] = useState(generatedValue || "");
  const [copied, setCopied] = useState(false);

  async function getReadme()
    {
        const loadingToast = toast.loading('Generating README...');
        await generateReadme(selectedRepo,owner)
        .then((content)=>
        {
            setValue(content)
            toast.dismiss(loadingToast);
            toast.success('README generated successfully!');
        })
        .catch((error)=>{
            toast.error(error.message)
        })

    }



    async function publishToGithub()
    {
        if(!selectedRepo)
        {
            throw Error('Repo not defined')    
        }
        if(!owner)
        {
            throw Error('Owner not defined')    
        }
        if(!email)
        {
            throw Error('Email not defined')    
        }

        try {
            const {data} = await axios.post(`${import.meta.env.VITE_BACKEND_URL}/api/v1/commit/readme`,{
                repo : selectedRepo,
                owner,
                content:value,
                email
            },{withCredentials:true});
            if(data?.success)
            {
              toast.success(`Published Readme to Github Repository : ${selectedRepo}`)
            }
        } catch (error) {
            if(error.response?.status === 401)
            {
              toast.error('User is Unauthorized to Publish')
            }
            toast.error(`Error Publishing to Github Repository : ${selectedRepo}`)
        }
    }


  // Copy to clipboard
  const handleCopy = () => {
    navigator.clipboard.writeText(value);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <div className="container max-w-4xl mx-auto mt-6 p-4">
      <div className="flex justify-between items-center mb-3">
        <h2 className="text-xl font-bold">README Preview</h2>
        <div className="flex gap-3">
            <button
                onClick={getReadme}
                className="md:hidden btn btn-sm btn-outline btn-secondary flex items-center gap-2"
                >
                <Brain size={16} />
                {'Generate Readme'}
            </button>
            <button
                onClick={publishToGithub}
                className="btn btn-sm btn-outline btn-primary flex items-center gap-2"
                disabled={!value}
                >
                <Github size={16} />
                {'Publish to Github'}
            </button>
            <button
                onClick={handleCopy}
                className="btn btn-sm btn-outline btn-primary flex items-center gap-2"
                disabled={!value}
                >
                <Copy size={16} />
                {copied ? "Copied!" : "Copy"}
                </button>
            </div>
      </div>

      <MDEditor
        value={value}
        onChange={setValue}
        height={300}
        preview="edit"
        visibleDragbar={false}
        textareaProps={{
          disabled: !generatedValue, // Disable editing until Gemini sets value
        }}
        hideToolbar={!generatedValue}
      />

      <div className="mt-5 border rounded bg-gray-00 p-4 shadow-md prose max-w-none">
        <MDEditor.Markdown
          source={value || "_Your README will appear here once generated by Gemini..._"}
          style={{ whiteSpace: "pre-wrap",height:'200px','overflow-y':'scroll' }}
        />
      </div>
    </div>
  );
}
